#include <Wire.h>
#include <LiquidCrystal_I2C.h>
float entra;
const int volti_ampi = A0;   // seleccionar la entrada para el sensor
const int ampi = A0;   // seleccionar la entrada para el sensor
float entrada;      // variable que almacena el valor raw (0 a 1023)
float volt;        // variable que almacena el voltaje (0.0 a 25.0)
float Sensibilidad = 0.066; //sensibilidad en Voltios/Amperio para sensor de 5A
int contador;
LiquidCrystal_I2C lcd(0x27, 16, 2);
void setup() {
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
  lcd.clear();
  attachInterrupt(digitalPinToInterrupt(2), voltimetro, CHANGE);
  attachInterrupt(digitalPinToInterrupt(3), amperimetro, CHANGE);
}

void loop() {
  entrada = analogRead(volti_ampi);        // realizar la lectura

  if (contador == 1) {
    volt =  fmap(entrada,0,1023,0.0,5.0);   // cambiar escala a 0.0 - 25.0

    Serial.println(volt);
    lcd.setCursor(0, 0);
    lcd.print("Voltimetro");
    lcd.setCursor(0, 1);
    lcd.print(volt, 3);
    delay(200);
  }
  if (contador == 2) {
    /*
    float voltajeSensor = (entrada *5.0) / 1023.0; //lectura del sensor
    float I = (voltajeSensor - 2.5) / Sensibilidad; //Ecuación  para obtener la corriente
    Serial.print("Corriente: ");
    Serial.println(I, 3);
    */

    
      float voltage = 5.0; // Voltaje de referencia (según la alimentación del Arduino)
  float sensitivity = 0.185; // Sensibilidad del sensor ACS712 (ajustar según el modelo utilizado)
  int sensorValue = analogRead(volti_ampi); // Lectura del valor analógico del sensor
  float current = (sensorValue - 512) * (voltage / 1024.0) / sensitivity; // Cálculo de la corriente en amperios
    lcd.setCursor(0, 0);
    lcd.print("Amperimetro");
    lcd.setCursor(0, 1);
    lcd.print(current, 3);
    delay(200);
  
  }
}

void voltimetro() {
  contador = 1;
}
void amperimetro() {
  contador = 2;
}




  // cambio de escala entre floats
  float fmap(float x, float in_min, float in_max, float out_min, float out_max)
  {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
